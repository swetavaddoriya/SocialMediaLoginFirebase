
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class ApiClient {

    private static Retrofit retrofit = null;

    public static Retrofit getClient() {
        OkHttpClient okHttpClient = UnsafeOkHttpClient.getUnsafeOkHttpClient();

//        OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
//      .connectTimeout(5, TimeUnit.MINUTES)
//                .readTimeout(5, TimeUnit.MINUTES)
//                .writeTimeout(5, TimeUnit.MINUTES)
//                .addInterceptor(new UserAgentInterceptor(Constants.ZXCVBTOZXCVB))
//                .build();

        if (retrofit == null) {
            retrofit = new Retrofit.Builder()
                    .baseUrl(Constants.baseURL)
                    .client(okHttpClient)
                    .addConverterFactory(GsonConverterFactory.create())
                    .build();
        }

        return retrofit;
    }

    public static Retrofit getTxtClient() {
        OkHttpClient okHttpClient = UnsafeOkHttpClient.getUnsafeOkHttpClient();

//        OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
//                .connectTimeout(5, TimeUnit.MINUTES)
//                .readTimeout(5, TimeUnit.MINUTES)
//                .writeTimeout(5, TimeUnit.MINUTES)
////                .addInterceptor(new UserAgentInterceptor(Constants.ZXCVBTOZXCVB))
//                .build();

        Retrofit retrofit = null;

        if (retrofit == null) {
            retrofit = new Retrofit.Builder()
                    .baseUrl(Constants.jsonUrl)
                    .client(okHttpClient)
                    .addConverterFactory(GsonConverterFactory.create())
                    .build();
        }

        return retrofit;

    }

//    public static class UserAgentInterceptor implements Interceptor {
//
//        private final String userAgent;
//
//        public UserAgentInterceptor(String userAgent) {
//            this.userAgent = userAgent;
//        }

//        @Override
//        public Response intercept(Chain chain) throws IOException {
//            Request originRequest = chain.request();
//            Request requestWithUserAgent = originRequest.newBuilder()
//                    .header("User-Agent", userAgent)
//                    .build();
//            return chain.proceed(requestWithUserAgent);
//        }
//    }

//    public static void changeApiBaseUrl(String newApiBaseUrl,String token) {
//
//        OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
//                .connectTimeout(5, TimeUnit.MINUTES)
//                .readTimeout(5, TimeUnit.MINUTES)
//                .writeTimeout(5, TimeUnit.MINUTES)
//                .addInterceptor(new UserAgentInterceptor(token))
//                .build();
//
//        retrofit = new Retrofit.Builder()
//                .baseUrl(newApiBaseUrl)
//                .client(okHttpClient)
//                .addConverterFactory(GsonConverterFactory.create())
//                .build();
//    }

}






=========================================================RequestApi===================================================







public interface RequestAPI {

        @POST("/ChangePassword")
        Call<ChangePasswordResponse> ChangePassword(@Body ChangePasswordRequest request);

    @POST("/Login")
    Call<LoginResponse> Login(@Body LoginRequest request);

    @POST("/StockSearch")
    Call<SearchDiamondResultResponse> StockSearch(@Body SearchDiamondResultRequest request);

    @POST("/AddToFavourite")
    Call<AddFavResponse> AddToFavourite(@Body AddFavRequest request);

    @POST("/StoneDetail")
    Call<StoneDetailsResponse> StoneDetail(@Body StoneDetailsRequest request);

    @POST("/FavouriteList")
    Call<FavListResponse> FavouriteList(@Body FavListRequest request);

    @POST("/ContactUs")
    Call<ContactUsResponse> ContactUs(@Body ContactUsRequest request);

    @POST("/Register")
    Call<CommonResponse> Register(@Body SignUpRequest request);

    @POST("/ForgetPassword")
    Call<CommonResponse> ForgetPassword(@Body ForgotPasswordRequest request);

    @POST("/Master")
    Call<MasterResponse> Master(@Body MasterRequest request);

    @GET("/MasterJson/masterdataJson.txt")
    Call<JsonObject> txtRead();

//    @Multipart
//    @POST("/AddTempImage")
//    Call<CommonResponse> AddTempImage(@Part("APIKey") RequestBody APIKey, @Part("UserID") RequestBody UserID, @Part("ImageData\"; filename=\"ImageData.png\" ") RequestBody ImageData);


}


===============================================
